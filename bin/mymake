#!/bin/bash
###############################################################################
# MyMake
#
# This script is supposed to make compiling several inter-dependent projects
# very easy.
#
# The script can be configured using a configuration file ~/.mymakerc which is
# just sourced and can contain shell code.
#
# The following variables can be set:
#
# - MODULE_DIRS: The directories to search for projects. Can be multiple,
#     space-separated paths. (default: ~/src)
# - BUILD_BASE: If this is empty (the default), then the build directory will
#     be a subdirectory of the source directory, called build.{debug,release}.
#     Otherwise the build directory will be $BUILD_BASE/{project}/{debug,release}.
#     Since the config file is just a bash script, the variable can be set
#     according to environment variables or the output of an external script.
#     e.g.: BUILD_BASE=~/build/$(hostname)
# - ${project}_EXTRA_OPTS: Arguments to make that are always used when
#     compiling ${project}.
# - ${project}_CMAKE_OPTS: Arguments to cmake that are used when the build
#     directory for compiling ${project} is first initialized.
# - ${project}_DEPS: Other projects (space-separated), that ${project} depends
#     on. They will be built by mymake before ${project}.
#
# Note that due to the shell syntax ${project} may not exactly be the same as
# the actual name of the project. In particular, "." and "-" are replaced by
# "_", since they are illegal in variable names.
###############################################################################

set -e

###############################################################################
# Default values
###############################################################################
MODULE_DIRS="$HOME/src"
BUILD_DEBUG=
BUILD_RELEASE=1
BUILD_MODULES=
BUILD_TOOL=make

###############################################################################
# Configuration file
###############################################################################
if [ -e $HOME/.mymakerc ]; then
    source $HOME/.mymakerc
fi

###############################################################################
# Command line parsing
###############################################################################
if [[ "$1" == "both" ]]; then
    BUILD_DEBUG=1
    BUILD_RELEASE=1
    shift
elif [[ "$1" == "debug" ]]; then
    BUILD_DEBUG=1
    BUILD_RELEASE=
    shift
elif [[ "$1" == "release" ]]; then
    BUILD_DEBUG=
    BUILD_RELEASE=1
    shift
fi

###############################################################################
# Build tool stuff
###############################################################################
if [[ $BUILD_TOOL == "ninja" ]]; then
    CMAKE_GENERATOR="Ninja"
elif [[ $BUILD_TOOL == "make" ]]; then
    CMAKE_GENERATOR="Unix Makefiles"
else
    echo "Unknown BUILD_TOOL $BUILD_TOOL"
    exit 1
fi

# Modules
function find_module()
{
    local mod=$1
    if [[ -z "$mod" ]]; then
        return 1
    fi

    if [[ $BUILD_MODULES =~ $mod ]]; then
        echo Module $mod already in list, skipping
        return 0
    fi

    local dir
    for dir in $MODULE_DIRS; do
        if [[ -d $dir/$mod ]]; then
            local mod_clean=${mod//[.-]/_}
            eval ${mod_clean}_PATH="$dir/$mod"
            local deps=$(eval echo \${${mod_clean}_DEPS})
            for dep in ${deps}; do
                find_module $dep
            done
            if [[ -z "$BUILD_MODULES" ]]; then
                BUILD_MODULES="${mod}"
            else
                BUILD_MODULES="${BUILD_MODULES} ${mod}"
            fi
            return 0
        fi
    done
    return 1
}

# Find modules given on command line
while find_module "$1"; do
    shift
done

# Find module based on current directory
if [[ -z "$BUILD_MODULES" ]]; then
    for dir in $MODULE_DIRS; do
        if [[ "$PWD" =~ "${dir}/" ]]; then
            mod="$( echo $PWD | sed "s#${dir}/\([^/]\+\).*#\1#" )"
            mod_clean=${mod//[.-]/_}
            eval ${mod_clean}_PATH="$dir/$mod"
            deps=$(eval echo \${${mod_clean}_DEPS})
            for dep in ${deps}; do
                find_module $dep
            done
            if [[ -z "$BUILD_MODULES" ]]; then
                BUILD_MODULES="${mod}"
            else
                BUILD_MODULES="${BUILD_MODULES} ${mod}"
            fi
            break
        fi
    done
fi

if [[ -z "$BUILD_MODULES" ]]; then
    echo "Usage: ${0##*/} [debug|release|both] [project1 project2 ...] [make options]"
    echo "Error: No project was found. Please provide one on the command line or"
    echo "       call this script from within a source directory"
    exit 1
fi

###############################################################################
# Building
###############################################################################

echo -ne "Building: $BUILD_MODULES ["
[[ -n $BUILD_DEBUG   ]] && echo -ne " debug"
[[ -n $BUILD_RELEASE ]] && echo -ne " release"
echo " ]"

for mod in $BUILD_MODULES; do
    VAR=$(eval echo ${mod//[.-]/_}_PATH)
    SRC_DIR=$(eval echo \${$VAR})
    VAR=$(eval echo ${mod//[.-]/_}_EXTRA_OPTS)
    EXTRA_OPTS=$(eval echo \${$VAR})
    VAR=$(eval echo ${mod//[.-]/_}_CMAKE_OPTS)
    CMAKE_OPTS=$(eval echo \${$VAR})

    if [[ -z "$BUILD_BASE" ]]; then
        BUILD_B=$SRC_DIR/build.
    else
        BUILD_B=$BUILD_BASE/$mod/
    fi

    if [[ -n "$BUILD_RELEASE" ]]; then
        BUILD_DIR=${BUILD_B}release
        if [[ ! -e $BUILD_DIR ]]; then
            ( mkdir -p $BUILD_DIR && cd $BUILD_DIR && cmake \
                -G "$CMAKE_GENERATOR" \
                -DCMAKE_BUILD_TYPE:STRING=Release $CMAKE_OPTS \
                $SRC_DIR )
        fi
        ( cd $BUILD_DIR && $BUILD_TOOL $EXTRA_OPTS "$@" )
    fi

    if [[ -n "$BUILD_DEBUG" ]]; then
        BUILD_DIR=${BUILD_B}debug
        if [[ ! -e $BUILD_DIR ]]; then
            ( mkdir -p $BUILD_DIR && cd $BUILD_DIR && cmake \
                -G "$CMAKE_GENERATOR" \
                -DCMAKE_BUILD_TYPE:STRING=Debug $CMAKE_OPTS \
                $SRC_DIR )
        fi
        ( cd $BUILD_DIR && $BUILD_TOOL $EXTRA_OPTS "$@" )
    fi
done

